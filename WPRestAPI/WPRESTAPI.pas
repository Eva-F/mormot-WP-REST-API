unit WPRESTAPI;
// the example of CRU objects of Wordpress(resp. Woocommerce) on the base
// WP REST API + Oauth1 authentication (resp Woocommerce API)
// this example shows how to read/update records of type Wordpress users  or read/update records of type Woocommerce's Customers
// see WPRESTAPIModels unit - user ->TSQLRESTAPIUser ; customer->TSQLWooCustomer
// The other Wordpress records  (of type post,  comment, media , pages.. ) and the other Woocommerce records ( type of products, orders,..) can be done on the same principle
// some routines from mormot could be chosen perhaps better and efficiently.
// created at dec 2015 - using unstable Mormot version >= 2015-12-22

// documentation to Woocommmerce REST API:    https://woothemes.github.io/woocommerce-rest-api-docs/
// documentation to WP REST API:              http://wp-api.org/
// documentation to WP REST API(version 2):   http://v2.wp-api.org/
// documentation to OAuth1                    http://oauth1.wp-api.org/

// this unit is tested for  Woocommmerce REST API v2 and  WP REST API (version 1)


// initialization's data structure is stored in TSQLWPConnection TSqlRecord (WPRESTAPIModels unit)
// and record is filled in TWPRESTAPI.Create(pFileName:TFileName) constructor


// ----------------------------------- WP Rest API -----------------------------
// {"fieldCount":15,"values":["Server","Port","RestAPI","WPOauth","HTTPS","ConsumerKey","ConsumerKeySecret","URL","AccessToken","AccessTokenSecret","WPUser","WPPassword","Expirated","RESTAPIVersion","OAUthPluginVersion",
// "[your-WP-server]","[WP-port]","wp-json","oauth1",[WP-secure],"[your-consumer-key]","[your-consumer-secret-key]","[WP-REST-API-Url]","","","[your-WP-user]","[your-WP-pwd]","","","[WP-OauthVersion]"]}
// the comment to the fields:
// [WP-port] - if empty string then is taken 80 as default value
// [WP-secure] - true/false
// [your-consumer-key], [your-consumer-secret-key] ->  these keys are generated by Oauth1 plugin
// [WP-REST-API-Url] - f.e. http://[your-WP-server]/wp-json/
// AccessToken, AccessTokenSecret,Expired - will be complemented after the authentication
// [your-WP-user],[your-WP-pwd] - Wordpress user with corresponding capabilities ( read-.., edit-..,create-..)
// [WP-OauthVersion] - either 0.2.1  or 0.3.0

// ----------------------------------- WooCommerce -----------------------------
// {"fieldCount":14,"values":["Server","Port","RestAPI","Oauth","HTTPS","ConsumerKey","ConsumerKeySecret","URL","AccessToken","AccessTokenSecret","WPUser","WPPassword","Expirated","RESTAPIVersion",
// "[your-WP-server]","[WP-port]","wc-api","",[WP-secure],"[your-consumer-key]","[your-consumer-secret-key]","[WP-REST-API-Url]","","","","","","[Woocommerce API version]"]}
// the comment to the fields:
// [WP-port] - if empty string then is taken 80 as default value
// [WP-secure] - true/false
// OAuth - not used
// [WP-REST-API-Url] - http[s]://[your-WP-server]/wc-api/[Woocommerce API version]/
// [your-consumer-key], [your-consumer-secret-key] ->  these keys are generated by Woocommerce->Setting->API->Create consumer
// AccessToken, AccessTokenSecret,Expired - not used
// WPUser, WPPassword - not used
//-----------------2016-01-01-----------------
// the changes:
// freeing WPRESTAPI.Parameters (thanks ab)
// support new version of OAuth1 plugin (0.2.1)
// adding field OauthPluginVersion into initial Setting Record (=TSQLWPConnection)
//-----------------2016-01-01-----------------
// rework fParameters to TTVarRecDynArray
//


interface

uses
  Classes, SysUtils,
  SynCommons,
  mORMot,
  mORMotHttpClient,
  StdCtrls, chimera.json;

// small remark to chimera.JSON
// it is alternative JSON library  (very lightweight, fast and simple) - see http://arcana.sivv.com/chimera
// it is possible to use Mormot JSON library by the  easy  rewriting of JSON Objects / JSON Arrays
// Chimera                                                       |         Mormot
// var lJSON : IJSONObject;                                          | var lJSON : variant;
// lJSONArray: IJSONArray;                                       |     lJSONArray : variant;
// lJSONAsString : string;
// lJSONCopy: IJSONObject;
// begin                                                             | begin
// lJSON := JSON;                                                 |   TDocVariant.New(lJSON);
// lJSON['id'] :=10;                                              |   lJson.id = 10;
// lJSON['doc'] := JSON;                                          |   ...
// lJSON.objects['doc']['name'] := 'John';                        |   ...
// lJSON.objects['doc']['birth'] := 1972;                         |   ...
// or                                                             |
// lJSON := JSON('{"id":10,"doc":{"name":"John","birth":1972}}'); | lJSON := _Json('{"id":10,"doc":{"name":"John","birthyear":1972}}');
// lJSONAsString  := lJSON.asJSON;
// lJSONCopy := JSON(lJSON.asJSON);
// the use is very similiar - I wouldn't boost chimera.json, but I have used this library for a long time and I'm used to it

type


  TWPRESTAPI = class
  private
    fParameters: TTVarRecDynArray;
    fParametersDocVariant : TDocVariantData;
    fJSONParameters: IJSONArray;
    fFileName: TFileName;

    fWPConnection: TSQLRecord;

    function getCommonRequestParameters(pURL, pEndpoint: RawUTF8; pParameters: string = '{}'; pMethod: RawUTF8 = 'GET'; pStep: RawUTF8 = 'OAUTH'): IJSONObject;
    function gethttp: RawUTF8;
    function getBaseURL(pOAuth: boolean): RawUTF8;
    procedure addParameter(pJSONParam : IJSONArray);
    function GenerateNonce: RawUTF8;
    function GenerateTimeStamp: int64;
    function generateOauthSignature(pURL, pEndpoint: RawUTF8; pParameters: string; pMethod: RawUTF8; pStep: RawUTF8 = 'OAUTH'; pSort: boolean = True): RawUTF8;
    // woocpmmerce requires sorted parameters
    function getSortedKeys(pJSONParams: IJSONObject; pSorted: boolean): TRawUTF8DynArray;

    function normalizeParameters(parameters: string): string;
    function fillRequestURLParameters(pURL, pEndpoint: RawUTF8; pParameters: string = '{}'; pMethod: RawUTF8 = 'GET'; pStep: RawUTF8 = 'OAUTH';
      pSort: boolean = True): boolean;
    function FindCharInHTML(source, start: PUTF8Char; out Tag: PUTF8Char; pChar: AnsiChar; pBack: boolean = False): boolean;
    function OpenWPConnectionFile(pFileName: TFileName): RawUTF8;
    function getServer: RawUTF8;
    procedure setServer(const pValue: RawUTF8);
    function getPort: RawUTF8;
    procedure setPort(const pValue: RawUTF8);
    function getRestAPI: RawUTF8;
    procedure setRestAPI(const pValue: RawUTF8);
    function getWPOauth: RawUTF8;
    procedure setWPOauth(const pValue: RawUTF8);
    function getHTTPS: boolean;
    procedure setHTTPS(const pValue: boolean);
    function getConsumerKey: RawUTF8;
    procedure setConsumerKey(const pValue: RawUTF8);
    function getConsumerKeySecret: RawUTF8;
    procedure setConsumerKeySecret(const pValue: RawUTF8);
    function getURL: RawUTF8;
    procedure setURL(const pValue: RawUTF8);
    function getAccessToken: RawUTF8;
    procedure setAccessToken(const pValue: RawUTF8);
    function getAccessTokenSecret: RawUTF8;
    procedure setAccessTokenSecret(const pValue: RawUTF8);
    function getWPUser: RawUTF8;
    procedure setWPUser(const pValue: RawUTF8);
    function getWPPassword: RawUTF8;
    procedure setWPPassword(const pValue: RawUTF8);
    function getExpirated: TDateTime;
    procedure setExpirated(const pValue: TDateTime);
    function getRESTAPIVersion: RawUTF8;
    procedure setRESTAPIVersion(const pValue: RawUTF8);
    function getOauthPluginVersion: RawUTF8;
    procedure setOauthPluginVersion(const pValue: RawUTF8);
  protected

    fWPSession: IJSONObject;
    fOAuthModel: TSQLModel;
    fRESTAPIModel: TSQLModel;
    fOauthClient: TSQLHttpClient;
    fRestAPIClient: TSQLHttpClient;
    function getHashKey(pStep: RawUTF8): RawByteString; virtual; Abstract;
    function getRestAPIClient: TSQLHttpClient; virtual; Abstract;
    function getWPHeader(pHeader: IJSONObject): RawUTF8;
    function getWPData(pData: IJSONObject): RawUTF8;
    function getValueFromResponse(pResponse: RawUTF8; pName: RawUTF8; pTag: boolean = False): RawUTF8;
    function ParseNonJSONResponse(pResponse: RawUTF8): string;
    function updateToWPConnectionFile: boolean;
    function getQueryString(pJSONParams: IJSONObject; pSorted: boolean; pFilter: boolean = False): RawUTF8; virtual;

    property RestAPIClient: TSQLHttpClient read getRestAPIClient;
    property WPSession: IJSONObject read fWPSession write fWPSession;
    property Server: RawUTF8 read getServer write setServer;
    property Port: RawUTF8 read getPort write setPort;
    property RestAPI: RawUTF8 read getRestAPI write setRestAPI;
    property WPOauth: RawUTF8 read getWPOauth write setWPOauth;
    property HTTPS: boolean read getHTTPS write setHTTPS;
    property ConsumerKey: RawUTF8 read getConsumerKey write setConsumerKey;
    property ConsumerKeySecret: RawUTF8 read getConsumerKeySecret write setConsumerKeySecret;
    property URL: RawUTF8 read getURL write setURL;
    property AccessToken: RawUTF8 read getAccessToken write setAccessToken;
    property AccessTokenSecret: RawUTF8 read getAccessTokenSecret write setAccessTokenSecret;
    property WPUser: RawUTF8 read getWPUser write setWPUser;
    property WPPassword: RawUTF8 read getWPPassword write setWPPassword;
    property Expirated: TDateTime read getExpirated write setExpirated;
    property RESTAPIVersion: RawUTF8 read getRESTAPIVersion write setRESTAPIVersion;
    property OauthPluginVersion: RawUTF8 read getOauthPluginVersion write setOauthPluginVersion;

  public
    constructor Create(pFileName: TFileName);
    destructor Destroy; override;
    function Connect: RawUTF8; virtual;
    function getRestAPIParameters: IJSONObject; virtual; Abstract;
    function getWAPIClient(pModel: RawUTF8; pFilters: string = '{}'): TSQLHttpClient; virtual; Abstract;
    function AddFiltersToParameters(pParameters: IJSONObject; pFilters: string): IJSONObject;

    procedure AddFilter(pFilters: IJSONObject; pKey, pValue: string);
    property parameters: TTVarRecDynArray read fParameters;
    property JSONParameters: IJSONArray read fJSONParameters write fJSONParameters;

  end;

  TWPRESTAPI1_0_3LEGS = class(TWPRESTAPI)
  private
    function WPOauthFlowRequest: boolean;
    function WPOauthFlowAuthorize: boolean;
    function WPOauthFlowAccess: boolean;
    function getWPOauthFlowRequestParameters: IJSONObject;
    function getWPOauthFlowAuthorizeParameters(pResponse: RawUTF8; pStep: integer): IJSONObject;
    function getWPOauthFlowAccessParameters: IJSONObject;
  protected
    function getHashKey(pStep: RawUTF8): RawByteString; override;
    function getRestAPIClient: TSQLHttpClient; override;
    function getQueryString(pJSONParams: IJSONObject; pSorted: boolean; pFilter: boolean = False): RawUTF8; override;
  public
    constructor Create(pFileName: TFileName);
    function Connect: RawUTF8; override;
    function getRestAPIParameters: IJSONObject; override;
    function getWPOauthFlowHeader(pCookie: boolean = False): IJSONObject;
    function getWAPIClient(pModel: RawUTF8; pFilters: string = '{}'): TSQLHttpClient; override;
  end;

  TWOOCOMMERCE = class(TWPRESTAPI)
  protected
    function getRestAPIClient: TSQLHttpClient; override;
    function getHashKey(pStep: RawUTF8): RawByteString; override;
    function getQueryString(pJSONParams: IJSONObject; pSorted: boolean; pFilter: boolean = False): RawUTF8; override;
  public
    constructor Create(pFileName: TFileName);
    function Connect: RawUTF8; override;
    function getRestAPIParameters: IJSONObject; override;
    function getWAPIClient(pModel: RawUTF8; pFilters: string = '{}'): TSQLHttpClient; override;

  end;

  TSQLWPClient = class(TSQLHttpClientWinHTTP)
  private
    fWPRESTAPI: TWPRESTAPI;
    fRoute: RawUTF8;
    fFilters: string;
    fJSONStr : RawUtf8;
  public
    function EngineUpdate(TableModelIndex: integer; ID: TID; const SentData: RawUTF8): boolean; override;
    function ExecuteList(const Tables: array of TSQLRecordClass; const SQL: RawUTF8): TSQLTableJSON; override;
    function EngineAdd(TableModelIndex: integer; const SentData: RawUTF8): TID; override;
    property WPRESTAPI: TWPRESTAPI read fWPRESTAPI write fWPRESTAPI;
    property route: RawUTF8 read fRoute write fRoute;
    property Filters: string read fFilters write fFilters;
    property JSONStr: RawUTF8 read fJSONStr write fJSONStr;
  end;

  TSQLWooClient = class(TSQLHttpClientWinHTTP)
  private
    fWooRESTAPI: TWPRESTAPI;
    fRoute: RawUTF8;
    fFilters: string;
    fJSONStr : RawUtf8;
  public
    function EngineAdd(TableModelIndex: integer; const SentData: RawUTF8): TID;override;
    function EngineUpdate(TableModelIndex: integer; ID: TID; const SentData: RawUTF8): boolean; override;
    function ExecuteList(const Tables: array of TSQLRecordClass; const SQL: RawUTF8): TSQLTableJSON; override;
    property WooRESTAPI: TWPRESTAPI read fWooRESTAPI write fWooRESTAPI;
    property route: RawUTF8 read fRoute write fRoute;
    property Filters: string read fFilters write fFilters;
    property JSONStr: RawUTF8 read fJSONStr write fJSONStr;

  end;

implementation

uses SynCrypto, windows, strUtils, WPRESTAPIModels, dateutils;

const
  UnixStartDate: TDateTime = 25569;

{$REGION 'utilities'}

function getDelimiter(pDelimiter: RawUTF8; pIdx: integer): RawUTF8;
begin
  Result := '';
  if not(pIdx = 0) then
    Result := pDelimiter;

end;

function getJSONKey(pJSON: IJSONObject; pIdx: integer): RawUTF8;
begin
  Result := StringToUTF8(pJSON.Names[pIdx]);
end;

function getJSONValue(pJSON: IJSONObject; pIdx: integer): RawUTF8; overload;
begin
  Result := StringToUTF8(pJSON.strings[pJSON.Names[pIdx]]);
end;

function getJSONValueAsVariant(pJSON: IJSONObject; pIdx: integer): Variant;
begin
  Result := pJSON[pJSON.Names[pIdx]];
end;

function getJSONValue(pJSON: IJSONObject; pName: RawUTF8): RawUTF8; overload;
begin
  Result := StringToUTF8(pJSON.strings[UTF8ToString(pName)]);
end;

function DataModel(const RootURI: RawUTF8; const pSQLRecordClass: array of TSQLRecordClass): TSQLModel;
begin
  Result := TSQLModel.Create(pSQLRecordClass, RootURI);
end;

function URLSafe(pURL: RawUTF8): RawUTF8;
begin
  Result := StringReplaceAll(UrlEncode(pURL), '+', '%20');
  Result := StringReplaceAll(Result, '/', '%2F');
end;

function trimEndLF(pURL: RawUTF8): RawUTF8;
begin
  Result := pURL;
  if copy(pURL, length(pURL) - 1, 2) = '\n' then
    Result := copy(pURL, 1, length(pURL) - 2);
end;

function URLSafeChar(pChars: AnsiString): RawUTF8;
var
  i: integer;
begin
  Result := '';
  for i := 1 to length(pChars) do
    Result := Result + '%' + StringToUTF8(InttoHex(ord(pChars[i]), 2));
end;

function URLSafeSignature(pURL: RawUTF8): RawUTF8;
begin
  Result := StringReplaceAll(StringReplaceAll(pURL, '%5B', '%255B'), '%5D', '%255D');
end;

function URLSafeParameter(pURL: RawUTF8): RawUTF8;
begin
  Result := StringReplaceAll(pURL, '%', '%25');
end;

{$ENDREGION}


{$REGION 'WPRESTAPI'}

function TWPRESTAPI.GenerateTimeStamp: int64;
var
  UTC: TSystemTime;
  x: double;
begin
  GetSystemTime(UTC);
  x := (SystemTimeToDateTime(UTC) - UnixStartDate) * 86400;
  Result := Trunc(x);
end;

function TWPRESTAPI.GenerateNonce: RawUTF8;
begin
  Result := md5(Int64ToUtf8(GenerateTimeStamp));
end;

function TWPRESTAPI.getServer: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).Server;
end;

procedure TWPRESTAPI.setServer(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).Server := pValue;
end;

function TWPRESTAPI.getPort: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).Port;
end;

procedure TWPRESTAPI.setPort(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).Port := pValue;
end;

function TWPRESTAPI.getRestAPI: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).RestAPI;
end;

procedure TWPRESTAPI.setRestAPI(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).RestAPI := pValue;
end;

function TWPRESTAPI.getWPOauth: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).WPOauth;
end;

procedure TWPRESTAPI.setWPOauth(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).WPOauth := pValue;
end;

function TWPRESTAPI.getHTTPS: boolean;
begin
  Result := TSQLWPConnection(fWPConnection).HTTPS;
end;

procedure TWPRESTAPI.setHTTPS(const pValue: boolean);
begin
  TSQLWPConnection(fWPConnection).HTTPS := pValue;
end;

function TWPRESTAPI.getConsumerKey: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).ConsumerKey;
end;

procedure TWPRESTAPI.setConsumerKey(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).ConsumerKey := pValue;
end;

function TWPRESTAPI.getConsumerKeySecret: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).ConsumerKeySecret;
end;

procedure TWPRESTAPI.setConsumerKeySecret(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).ConsumerKeySecret := pValue;
end;

function TWPRESTAPI.getURL: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).URL;
end;

procedure TWPRESTAPI.setURL(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).URL := pValue;
end;

function TWPRESTAPI.getAccessToken: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).AccessToken;
end;

procedure TWPRESTAPI.setAccessToken(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).AccessToken := pValue;
  Expirated := now() + 1;

end;

function TWPRESTAPI.getAccessTokenSecret: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).AccessTokenSecret;
end;

procedure TWPRESTAPI.setAccessTokenSecret(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).AccessTokenSecret := pValue;
end;

function TWPRESTAPI.getWPUser: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).WPUser;
end;

procedure TWPRESTAPI.setWPUser(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).WPUser := pValue;
end;

function TWPRESTAPI.getRESTAPIVersion: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).RESTAPIVersion;
end;

procedure TWPRESTAPI.setRESTAPIVersion(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).RESTAPIVersion := pValue;
end;

function TWPRESTAPI.getOauthPluginVersion: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).OauthPluginVersion;
  if Result = '' then
    Result := '0.3.0';        //latest test version
end;

procedure TWPRESTAPI.setOauthPluginVersion(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).OauthPluginVersion := pValue;
end;


function TWPRESTAPI.getWPPassword: RawUTF8;
begin
  Result := TSQLWPConnection(fWPConnection).WPPassword;
end;

procedure TWPRESTAPI.setWPPassword(const pValue: RawUTF8);
begin
  TSQLWPConnection(fWPConnection).WPPassword := pValue;
end;

function TWPRESTAPI.getExpirated: TDateTime;
begin
  Result := TSQLWPConnection(fWPConnection).Expirated;
end;

procedure TWPRESTAPI.setExpirated(const pValue: TDateTime);
begin
  TSQLWPConnection(fWPConnection).Expirated := pValue;
end;

function TWPRESTAPI.updateToWPConnectionFile: boolean;
var
  F: TStream;
  W: TJSONSerializer;
begin
  Result := False;
  try
    F := TFileStream.Create(fFileName, fmOpenReadWrite);
    W := fWPConnection.RecordProps.CreateJSONWriter(F, False, False, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 0);
    fWPConnection.GetJSONValuesAndFree(W);
  finally
//    W.Free;
    F.Free;
    Result := True;
  end;
end;

constructor TWPRESTAPI.Create(pFileName: TFileName);

begin
  fFileName := pFileName;
  OpenWPConnectionFile(pFileName);
  fWPSession := JSON;
  WPSession['Legged'] := 3;
  WPSession['WPOauthVersion'] := '1.0';
end;


destructor TWPRESTAPI.Destroy;
var i : integer;
begin
  if assigned(fOauthClient) then
    FreeAndNil(fOauthClient);
  if assigned(fRestAPIClient) then
    FreeAndNil(fRestAPIClient);
  if assigned(fWPConnection) then
    FreeAndNil(fWPConnection);
  if assigned(fOAuthModel) then
    FreeAndNil(fOAuthModel);
  if assigned(fRESTAPIModel) then
    FreeAndNil(fRESTAPIModel);
end;

function TWPRESTAPI.getWPHeader(pHeader: IJSONObject): RawUTF8;
var
  i, j: integer;
  lParam: IJSONObject;

begin
  Result := '';
  for i := 0 to pHeader.count - 1 do
  begin
    Result := Result + getDelimiter(#13#10, i) + getJSONKey(pHeader, i) + ': ';
    if pHeader.types[pHeader.Names[i]] = TJSONValueType.object then
    begin
      lParam := pHeader.objects[pHeader.Names[i]];
      for j := 0 to lParam.count - 1 do
        Result := Result + getDelimiter('&', j) + getJSONKey(lParam, j) + '=' + UrlEncode(getJSONValue(lParam, j));
    end
    else
      Result := Result + getJSONValue(pHeader, i);
  end;
end;

function TWPRESTAPI.getWPData(pData: IJSONObject): RawUTF8;
var
  i: integer;
begin
  Result := '';
  for i := 0 to pData.count - 1 do
    Result := Result + getDelimiter('&', i) + getJSONKey(pData, i) + '=' + UrlEncode(getJSONValueAsVariant(pData, i));
end;

function TWPRESTAPI.gethttp: RawUTF8;
begin
  Result := 'http';
  if getHTTPS then
    Result := Result + 's';
  Result := Result + '://';
end;

function TWPRESTAPI.getBaseURL(pOAuth: boolean): RawUTF8;
begin
  Result := gethttp + Server;
  if pOAuth then
    Result := Result + '/' + WPOauth
  else
    Result := Result + '/' + RestAPI;
  Result := Result + '/';
end;

procedure TWPRESTAPI.AddFilter(pFilters: IJSONObject; pKey, pValue: string);
  function Invalid(P: PAnsiChar): boolean;
  begin
    Result := True;
    if P <> nil then
    begin
      repeat // cf. rfc3986 2.3. Unreserved Characters
        if not(P^ in ['a' .. 'z', 'A' .. 'Z', '0' .. '9', '_', '.', '~']) then
          exit
        else
          inc(P);
      until P^ = #0;
      Result := False;
    end;
  end;

begin
  if Invalid(pointer(pKey)) then
    exit;
  if not pFilters.Has[pKey] then
    pFilters[pKey] := pValue;
end;

function TWPRESTAPI.AddFiltersToParameters(pParameters: IJSONObject; pFilters: string): IJSONObject;
var
  i: integer;
  lFilters: IJSONObject;
begin
  Result := JSON(pParameters.AsJSON);
  lFilters := JSON(pFilters);
  for i := 0 to lFilters.count - 1 do
    if not Result.Has['filter[' + lFilters.Names[i] + ']'] then
      Result['filter[' + lFilters.Names[i] + ']'] := lFilters[lFilters.Names[i]];
end;

function TWPRESTAPI.OpenWPConnectionFile(pFileName: TFileName): RawUTF8;
begin
  try
    fWPConnection := TSQLWPConnection.CreateAndFillPrepare(StringFromFile(ExtractFilePath(paramstr(0)) + pFileName));
    fWPConnection.FillOne;
  except
    writeln('File ' + pFileName + ' not found or bad format')
  end;
end;

function TWPRESTAPI.Connect: RawUTF8;
begin
  Result := '';
end;

function TWPRESTAPI.getSortedKeys(pJSONParams: IJSONObject; pSorted: boolean): TRawUTF8DynArray;
var
  i: integer;
begin
  setLength(Result, pJSONParams.count);
  for i := 0 to pJSONParams.count - 1 do
    Result[i] := getJSONKey(pJSONParams, i);
  if pSorted then
    QuickSortRawUTF8(Result, pJSONParams.count);

end;

function TWPRESTAPI.getQueryString(pJSONParams: IJSONObject; pSorted, pFilter: boolean): RawUTF8;
var
  lSL: TRawUTF8DynArray;
  i: integer;
begin
  lSL := getSortedKeys(pJSONParams, pSorted);

  // # Build up query string with equal signs and %26's
  Result := '';

  for i := 0 to pJSONParams.count - 1 do
    if pFilter then
      Result := Result + getDelimiter('&', i) + 'filter[' + lSL[i] + ']' + '=' + URLSafeSignature(getJSONValue(pJSONParams, lSL[i]))
    else begin
        Result := Result + getDelimiter(URLSafeChar('&'), i) + lSL[i] + URLSafeChar('=') + URLSafeSignature(getJSONValue(pJSONParams, lSL[i]))
    end;
  finalize(lSL);
end;

function TWPRESTAPI.generateOauthSignature(pURL, pEndpoint: RawUTF8; pParameters: string; pMethod: RawUTF8; pStep: RawUTF8; pSort: boolean): RawUTF8;
var
  lJSONParams: IJSONObject;
  lURL, lBaseUrl, lQueryString: RawUTF8;
  lcs: RawByteString;
  i: integer;
  P: PAnsiChar;
  Digest: TSHA256Digest;
begin
  try
    lJSONParams := JSON(pParameters);

    if lJSONParams.Has['oauth_signature'] then
      lJSONParams.DeleteItem('oauth_signature');

    lBaseUrl := URLSafe(pURL + pEndpoint);

    // Build out a normalized (for OAuth spec) list of parameters that are sorted in byte-order
    lJSONParams := JSON(normalizeParameters(lJSONParams.AsJSON));

    lQueryString := getQueryString(lJSONParams, pSort);

    lURL := pMethod + '&' + lBaseUrl + '&' + lQueryString ;

    lcs := getHashKey(pStep);

    HMAC_SHA256(pointer(lcs), pointer(lURL), length(lcs), length(lURL), Digest);

    P := PAnsiChar(@Digest[0]);

    Result := UrlEncode(trimEndLF(BinToBase64(P, 32)));
  finally
  end;
end;

function TWPRESTAPI.normalizeParameters(parameters: string): string;
var
  lJSONParams, lJSONNorm: IJSONObject;
  i: integer;

  function URLDecodeParam(pValue: RawUTF8): RawUTF8;
  begin
    Result := '';
    try
      Result := URLDecode(pValue);
    except

    end;
    if Result = '' then
      Result := pValue;
  end;

begin
  lJSONNorm := JSON;
  lJSONParams := JSON(parameters);
  for i := 0 to lJSONParams.count - 1 do
    lJSONNorm[UTF8ToString(UrlEncode(URLDecodeParam(getJSONKey(lJSONParams, i))))] :=
      UTF8ToString(URLSafeParameter(UrlEncode(URLDecodeParam(getJSONValue(lJSONParams, i)))));
  Result := lJSONNorm.AsJSON;
end;

function TWPRESTAPI.getCommonRequestParameters(pURL, pEndpoint: RawUTF8; pParameters: string; pMethod: RawUTF8; pStep: RawUTF8): IJSONObject;
begin
  Result := JSON(pParameters);
  Result['oauth_timestamp'] := inttostr(GenerateTimeStamp);
  Result['oauth_nonce'] := GenerateNonce;
  Result['oauth_signature_method'] := 'HMAC-SHA256';
  Result['oauth_signature'] := generateOauthSignature(pURL, pEndpoint, Result.AsJSON, pMethod, pStep);
end;

function TWPRESTAPI.fillRequestURLParameters(pURL, pEndpoint: RawUTF8; pParameters: string; pMethod, pStep: RawUTF8; pSort: boolean): boolean;
var
  lJSONParams, lJSON: IJSONObject;
  lSL: TRawUTF8DynArray;
  i: integer;
begin
  try
    Result := False;
    JSONParameters := JSONArray;
    lJSONParams := getCommonRequestParameters(pURL, pEndpoint, pParameters, pMethod, pStep);
    lSL := getSortedKeys(lJSONParams, pSort);
    for i := 0 to lJSONParams.count - 1 do
    begin
      lJSON := JSON;
      lJSON[UTF8ToString(lSL[i])] := lJSONParams.strings[UTF8ToString(lSL[i])];

      if not startsText('filter[', lJSON.Names[0]) then
        JSONParameters.Add(JSON(lJSON.AsJSON)); // copy of jsonobject
    end;
//    lJSON := JSON;
//    lJSON['XDEBUG_SESSION_START'] := 'WPtest';
//    JSONParameters.Add(JSON(lJSON.asJSON));        // copy of jsonobject

    addParameter(JSONParameters);

  finally
    Result := True;
    finalize(lSL);
  end;
end;

function TWPRESTAPI.FindCharInHTML(source, start: PUTF8Char; out Tag: PUTF8Char; pChar: AnsiChar; pBack: boolean = False): boolean;
begin
  Result := False;
  if source = nil then
    exit;
  repeat
    if source^ = pChar then
    begin
      Tag := source;
      Result := True;
      exit;
    end;
    if pBack then
      dec(source)
    else
      inc(source) until (source^ = #0) or (pBack and (source = start));
  end;

  function TWPRESTAPI.getValueFromResponse(pResponse: RawUTF8; pName: RawUTF8; pTag: boolean = False): RawUTF8;
  var
    P, pOpenTag, pCloseTag, pValue, pSearch: PUTF8Char;
    lInputTag: RawUTF8;
    lSearchValue: RawUTF8;
  begin
    Result := '';
    P := pointer(pResponse);
    lInputTag := '';
    if not pTag then
      lSearchValue := UpperCaseU('name="' + pName + '"')
    else
      lSearchValue := '<' + UpperCaseU(pName) + '>';

    pSearch := StrPosI(pointer(lSearchValue), P);
    if assigned(pSearch) then
    begin
      P := pSearch;
      if pTag then
      begin
        inc(pSearch, length(pName) + 2);
        lSearchValue := '</' + Uppercase(pName) + '>';
        pCloseTag := StrPosI(pointer(lSearchValue), P);
        SetString(Result, pSearch, pCloseTag - pSearch);

      end
      else if FindCharInHTML(P, pointer(pResponse), pOpenTag, '<', True) and FindCharInHTML(P, pointer(pResponse), pCloseTag, '>') then
      begin
        SetString(lInputTag, PAnsiChar(pOpenTag), pCloseTag - pOpenTag);
        P := pointer(lInputTag);
        lSearchValue := Uppercase('value="');
        pSearch := StrPosI('VALUE="', P);
        if assigned(pSearch) then
        begin
          inc(pSearch, 7);

          if FindCharInHTML(pSearch, pointer(lInputTag), pValue, '"') then
            SetString(Result, pSearch, pValue - pSearch);
        end;
      end;
    end

  end;

  function TWPRESTAPI.ParseNonJSONResponse(pResponse: RawUTF8): string;
  var
    P: PUTF8Char;
    lJSONResponse: IJSONObject;
    lKey, lVal: RawUTF8;
  begin
    lJSONResponse := JSON;
    P := PUTF8Char(pointer(pResponse));
    repeat
      P := UrlDecodeNextNameValue(P, lKey, lVal);
      if P = nil then
        break
      else begin
        lKey := StringReplaceAll(lKey,#13,'');
        lKey := StringReplaceAll(lKey,#10,'');

        lJSONResponse[UTF8ToString(lKey)] := UTF8ToString(lVal);
      end;
    until P^ = #0;
    Result := lJSONResponse.AsJSON;
  end;

  procedure TWPRESTAPI.addParameter(pJSONParam: IJSONArray);
  var
    i, l: integer;
    lParameters : TDocVariantData;
    lJSON : IJSONObject;
  begin
    fParametersDocVariant.InitArray([]);
    for i := 0 to (pJSONParam.Count - 1)  do
    begin
      lJSON := pJSONParam.objects[i];
      fParametersDocVariant.addItem(getJsonKey(lJSON,0));
      fParametersDocVariant.addItem(getJsonValue(lJSON,0));
    end;

    fParametersDocVariant.ToArrayOfConst( fParameters);


  end;

{$ENDREGION}

{$REGION 'TWPRESTAPI1_0_3LEGS'}

  constructor TWPRESTAPI1_0_3LEGS.Create(pFileName: TFileName);
  var
    s: string;

  begin
    inherited;
    s := WPSession.AsJSON;
    WPSession['WPOauthVersion'] := '1.0a';
    WPSession['Legged'] := 3;
    s := WPSession.AsJSON;
    fOAuthModel := DataModel(WPOauth, []);
    fRESTAPIModel := DataModel(RestAPI, [TSQLRESTAPIUser]);

  end;

  function TWPRESTAPI1_0_3LEGS.getRestAPIClient: TSQLHttpClient;
  begin
    if not assigned(fRestAPIClient) then
    begin

      // fRestAPIClient := TSQLHttpClientWinHTTP.Create(fServer,fWPPort,fRESTAPIModel);
      fRestAPIClient := TSQLWPClient.Create(Server, Port, fRESTAPIModel);
      TSQLWPClient(fRestAPIClient).WPRESTAPI := self;
      fRestAPIClient.ServerTimeStamp := 1; // don't send timestamp
    end;
    Result := fRestAPIClient
  end;

  function TWPRESTAPI1_0_3LEGS.WPOauthFlowRequest: boolean;
  var
    lResponse: RawUTF8;
    lReturnValue: IJSONObject;
  begin
    Result := False;
    lReturnValue := JSON;
    if fillRequestURLParameters(getBaseURL(True), 'request', getWPOauthFlowRequestParameters.AsJSON) and
      (fOauthClient.CallBackGet('request', fParameters, lResponse) = HTTP_SUCCESS) then
    begin
      lReturnValue := JSON(ParseNonJSONResponse(lResponse));
      if lReturnValue.Has['oauth_token'] and lReturnValue.Has['oauth_token_secret'] then
      begin
        WPSession['RequestToken'] := lReturnValue.strings['oauth_token'];
        WPSession['RequestTokenSecret'] := lReturnValue.strings['oauth_token_secret'];
        Result := True;
      end;
    end;
  end;

  function TWPRESTAPI1_0_3LEGS.getWPOauthFlowRequestParameters: IJSONObject;
  begin
    Result := JSON;
    Result['oauth_consumer_key'] := ConsumerKey;
  end;

  function TWPRESTAPI1_0_3LEGS.getWPOauthFlowAuthorizeParameters(pResponse: RawUTF8; pStep: integer): IJSONObject;
  begin
    Result := JSON;
    case pStep of
      1:
        begin
          Result['wp-submit'] := 'Log In';
          Result['log'] := getWPUser;
          Result['pwd'] := getWPPassword;
          Result['redirect_to'] := '/wp-login.php?action=oauth1_authorize&oauth_token=' + WPSession['RequestToken'];
          Result['testcookie'] := '1';
        end;
      2:
        begin
          Result['wp-submit'] := 'authorize';
          Result['consumer'] := getValueFromResponse(pResponse, 'consumer');
          Result['oauth_token'] := getValueFromResponse(pResponse, 'oauth_token');
          Result['_wpnonce'] := getValueFromResponse(pResponse, '_wpnonce');
          Result['_wp_http_referer'] := getValueFromResponse(pResponse, '_wp_http_referer');
        end;
    end;

  end;

  function TWPRESTAPI1_0_3LEGS.getRestAPIParameters: IJSONObject;
  begin
    Result := JSON;
    Result['oauth_consumer_key'] := ConsumerKey;
    Result['oauth_token'] := AccessToken;
  end;

  function TWPRESTAPI1_0_3LEGS.getWPOauthFlowAccessParameters: IJSONObject;
  begin
    Result := JSON;
    Result['oauth_consumer_key'] := ConsumerKey;
    Result['oauth_token'] := WPSession['RequestToken'];
    Result['oauth_verifier'] := WPSession['OauthVerifier'];
  end;

  function TWPRESTAPI1_0_3LEGS.getWPOauthFlowHeader(pCookie: boolean = False): IJSONObject;
  begin
    Result := JSON;
    Result['Content-Type'] := 'application/x-www-form-urlencoded';
    if pCookie then
    begin
      Result['Cookie'] := JSON;
      Result.objects['Cookie']['wordpress_test_cookie'] := 'WP Cookie check';
    end;
  end;

  function TWPRESTAPI1_0_3LEGS.getHashKey(pStep: RawUTF8): RawByteString;
  begin
    if pStep = 'API' then
      Result := ConsumerKeySecret + '&' + AccessTokenSecret
    else if pStep = 'ACCESS' then
      Result := ConsumerKeySecret + '&' + WPSession.strings['RequestTokenSecret']
    else
      Result := ConsumerKeySecret + '&'
  end;

  function TWPRESTAPI1_0_3LEGS.WPOauthFlowAuthorize: boolean;
  var
    lResponse, lSentdata, lHEad: RawUTF8;
    lResult: integer;

  begin
    Result := False;
    try
      lHEad := getWPHeader(getWPOauthFlowHeader(True));
      lSentdata := getWPData(getWPOauthFlowAuthorizeParameters('', 1));

      lResult := fOauthClient.URI('wp-login.php', 'POST', @lResponse, @lHEad, @lSentdata).Lo;

      lHEad := getWPHeader(getWPOauthFlowHeader);
      lSentdata := getWPData(getWPOauthFlowAuthorizeParameters(lResponse, 2));

      lResult := fOauthClient.URI('wp-login.php?action=oauth1_authorize&oauth_token=' + getJSONValue(WPSession, 'RequestToken'), 'POST', @lResponse, @lHEad,
        @lSentdata).Lo;

      WPSession['OauthVerifier'] := getValueFromResponse(lResponse, 'code', True);
    finally
      Result := True;
    end;
  end;

  function TWPRESTAPI1_0_3LEGS.WPOauthFlowAccess: boolean;
  var
    lResponse: RawUTF8;
    lReturnValue: IJSONObject;
    lStep : RawUTF8;
  begin
    Result := False;
    lStep := 'OAUTH';
    if (OauthPluginVersion = '0.3.0') or (OAUthPluginVersion= '0.2.1') then
      lStep := 'ACCESS';


    if fillRequestURLParameters(getBaseURL(True), 'access', getWPOauthFlowAccessParameters.AsJSON, 'GET',lStep) and
      (fOauthClient.CallBackGet('access', fParameters, lResponse) = HTTP_SUCCESS) then
    begin
      lReturnValue := JSON;
      lReturnValue := JSON(ParseNonJSONResponse(lResponse));
      if lReturnValue.Has['oauth_token'] and lReturnValue.Has['oauth_token_secret'] then
      begin
        AccessToken := StringToUTF8(lReturnValue.strings['oauth_token']);
        AccessTokenSecret := StringToUTF8(lReturnValue.strings['oauth_token_secret']);
        Result := True;
      end;
    end;

  end;

  function TWPRESTAPI1_0_3LEGS.Connect: RawUTF8;
  begin
    Result := '';
    if not((length(AccessToken) > 5) and (CompareDateTime(now(), Expirated) < 0)) then
    begin
      fOauthClient := TSQLHttpClientWinHTTP.Create(Server, Port, fOAuthModel);

      fOauthClient.ServerTimeStamp := 1; // don't send timestamp
      if startsText('1.0', WPSession['WPOauthVersion']) and (WPSession['Legged'] = 3) then
      begin
        if WPOauthFlowRequest and WPOauthFlowAuthorize and WPOauthFlowAccess then
        begin
          if updateToWPConnectionFile then
            Result := 'connected';
        end;
      end;
    end
    else
      Result := 'reconnected';
  end;

  function TWPRESTAPI1_0_3LEGS.getQueryString(pJSONParams: IJSONObject; pSorted, pFilter: boolean): RawUTF8;
  var
    lSL: TRawUTF8DynArray;
    i: integer;
  begin
    lSL := getSortedKeys(pJSONParams, pSorted);

    // # Build up query string with equal signs and %26's
    Result := '';

    for i := 0 to pJSONParams.count - 1 do
      if pFilter then
        Result := Result + getDelimiter('&', i) + 'filter[' + lSL[i] + ']' + '=' + URLSafeSignature(getJSONValue(pJSONParams, lSL[i]))
      else begin
        if (OauthPluginVersion = '0.3.0') then
          Result := Result + getDelimiter(URLSafeChar('&'), i) + URLSafeSignature(lSL[i]) + URLSafeChar('=') + URLSafeSignature(getJSONValue(pJSONParams, lSL[i]))
        else
          Result := Result + getDelimiter(URLSafeChar('&'), i) + lSL[i] + URLSafeChar('=') + URLSafeSignature(getJSONValue(pJSONParams, lSL[i]));
      end;
    finalize(lSL);
  end;

  function TWPRESTAPI1_0_3LEGS.getWAPIClient(pModel: RawUTF8; pFilters: string): TSQLHttpClient;
  begin
    TSQLWPClient(RestAPIClient).route := pModel;
    TSQLWPClient(RestAPIClient).Filters := pFilters;

    Result := RestAPIClient;
  end;

{$ENDREGION}
{$REGION 'TWOOCommerce'}

  constructor TWOOCOMMERCE.Create(pFileName: TFileName);
  begin
    inherited;
    WPSession['WPOauthVersion'] := '1.0a';
    WPSession['Legged'] := 1;
    fRESTAPIModel := DataModel(RestAPI, [TSQLWooCustomer]);
  end;

  function TWOOCOMMERCE.getHashKey(pStep: RawUTF8): RawByteString;
  begin
    Result := ConsumerKeySecret;
  end;

  function TWOOCOMMERCE.Connect: RawUTF8;
  begin
    Result := 'connected';
  end;

  function TWOOCOMMERCE.getRestAPIParameters: IJSONObject;
  begin
    Result := JSON;
    Result['oauth_consumer_key'] := ConsumerKey;
  end;

  function TWOOCOMMERCE.getQueryString(pJSONParams: IJSONObject; pSorted, pFilter: boolean): RawUTF8;
  var
    lSL: TRawUTF8DynArray;
    i: integer;
  begin
    lSL := getSortedKeys(pJSONParams, pSorted);

    // # Build up query string with equal signs and %26's
    Result := '';

    for i := 0 to pJSONParams.count - 1 do
      if pFilter then
        Result := Result + getDelimiter('&', i) + 'filter[' + lSL[i] + ']' + '=' + getJSONValue(pJSONParams, lSL[i])
      else
        Result := Result + getDelimiter(URLSafeChar('&'), i) + lSL[i] + URLSafeChar('=') + getJSONValue(pJSONParams, lSL[i]);
    Result := URLSafeSignature(Result);
    finalize(lSL);
  end;

  function TWOOCOMMERCE.getRestAPIClient: TSQLHttpClient;
  begin
    if not assigned(fRestAPIClient) then
    begin
      fRestAPIClient := TSQLWooClient.Create(Server, Port, fRESTAPIModel);
      TSQLWooClient(fRestAPIClient).WooRESTAPI := self;
      fRestAPIClient.ServerTimeStamp := 1; // don't send timestamp
    end;
    Result := fRestAPIClient
  end;

  function TWOOCOMMERCE.getWAPIClient(pModel: RawUTF8; pFilters: string): TSQLHttpClient;
  begin
    TSQLWooClient(RestAPIClient).route := pModel;
    TSQLWooClient(RestAPIClient).Filters := pFilters;

    Result := RestAPIClient;
  end;
{$ENDREGION}
{$REGION 'TSQLWPClient'}

  function TSQLWPClient.EngineAdd(TableModelIndex: integer;
    const SentData: RawUTF8): TID;
  var P: PUTF8Char;
      url, Head: RawUTF8;
    Resp, lSentdata: RawUTF8;
    lData, lSent, lParam, lParameters: IJSONObject;
    i: integer;
  begin
    Result := -1;
    lData := JSON(UTF8ToString(SentData));

    head := WPRESTAPI.getWPHeader(TWPRESTAPI1_0_3LEGS(WPRESTAPI).getWPOauthFlowHeader(False));
    lParameters := WPRESTAPI.getRestAPIParameters;
    for i := 0 to lData.count - 1 do
      lParameters[lData.Names[i]] := UrlEncode(getJSONValueAsVariant(lData, i));

    if TWPRESTAPI1_0_3LEGS(WPRESTAPI).fillRequestURLParameters(WPRESTAPI.getBaseURL(False), route , lParameters.AsJSON, 'POST', 'API')
    then
    begin
      try
        URL := WPRESTAPI.RestAPI + '/' + route;// '&XDEBUG_SESSION_START=WPtest'; ;

        lSentdata := '';
        lSent := JSON;

        for i := 0 to WPRESTAPI.JSONParameters.count - 1 do
        begin
          lParam := WPRESTAPI.JSONParameters.objects[i];
          if lData.Has[lParam.Names[0]] then
            lSent[lParam.Names[0]] := lData[lParam.Names[0]]
          else
            lSentdata := lSentdata + getDelimiter(',', i) + getJSONKey(lParam, 0) + '=' + getJSONValue(lParam, 0);
        end;
        head := head + #13#10 + 'Authorization: OAuth ' + lSentdata;

        lSentdata := TWPRESTAPI1_0_3LEGS(WPRESTAPI).getWPData(lData);

        result := 0;
  //      url := Model.URI[Model.Tables[TableModelIndex]];
        if URI(url,'POST', @Resp,@Head,@lSentData).Lo<>HTTP_CREATED then
          exit; // response must be '201 Created'
      finally
        JSONStr := Resp;
      end;
      lData := JSON(JSONStr);
      if lData.has['ID'] then
        result := lData.integers['ID'];

    end;
  end;


  function TSQLWPClient.EngineUpdate(TableModelIndex: integer; ID: TID; const SentData: RawUTF8): boolean;
  var
    URL, header, Resp, lSentdata: RawUTF8;
    lData, lSent, lParam, lParameters: IJSONObject;
    i: integer;
  begin
    Result := False;
    lData := JSON(UTF8ToString(SentData));

    header := WPRESTAPI.getWPHeader(TWPRESTAPI1_0_3LEGS(WPRESTAPI).getWPOauthFlowHeader(False));
    lParameters := WPRESTAPI.getRestAPIParameters;
    for i := 0 to lData.count - 1 do
      lParameters[lData.Names[i]] := UrlEncode(getJSONValueAsVariant(lData, i));

    if TWPRESTAPI1_0_3LEGS(WPRESTAPI).fillRequestURLParameters(WPRESTAPI.getBaseURL(False), route + '/' + Int64ToUtf8(ID), lParameters.AsJSON, 'POST', 'API')
    then
    begin
      try

        URL := WPRESTAPI.RestAPI + '/' + route + '/' + Int64ToUtf8(ID) ;// '&XDEBUG_SESSION_START=WPtest';;

        lSentdata := '';
        lSent := JSON;

        for i := 0 to WPRESTAPI.JSONParameters.count - 1 do
        begin
          lParam := WPRESTAPI.JSONParameters.objects[i];
          if lData.Has[lParam.Names[0]] then
            lSent[lParam.Names[0]] := lData[lParam.Names[0]]
          else
            lSentdata := lSentdata + getDelimiter(',', i) + getJSONKey(lParam, 0) + '=' + getJSONValue(lParam, 0);
        end;
        header := header + #13#10 + 'Authorization: OAuth ' + lSentdata;

        lSentdata := TWPRESTAPI1_0_3LEGS(WPRESTAPI).getWPData(lData);

        Result := URI(URL, 'POST', @Resp, @header, @lSentdata).Lo = HTTP_SUCCESS;
      finally
        JsonStr := Resp;
      end;
      // to add check of error messages
    end;
  end;

  function TSQLWPClient.ExecuteList(const Tables: array of TSQLRecordClass; const SQL: RawUTF8): TSQLTableJSON;
  var
    Resp, URL, lHeader: RawUTF8;
    lParam, lParameters, lFilters: IJSONObject;
    i: integer;

  begin
    Result := nil;
    if not(self = nil) then
    begin
      lParameters := WPRESTAPI.AddFiltersToParameters(WPRESTAPI.getRestAPIParameters, Filters);

      if TWPRESTAPI1_0_3LEGS(WPRESTAPI).fillRequestURLParameters(WPRESTAPI.getBaseURL(False), route, lParameters.AsJSON, 'GET', 'API') then
      begin
        try
          lFilters := JSON(Filters);
          URL := WPRESTAPI.RestAPI + '/' + route ;
          if lFilters.count > 0 then
            URL := URL + '?' + TWPRESTAPI1_0_3LEGS(WPRESTAPI).getQueryString(lFilters, True, True); //+'&XDEBUG_SESSION_START=WPtest';

          lHeader := 'Authorization: OAuth ';
          for i := 0 to WPRESTAPI.JSONParameters.count - 1 do
          begin
            lParam := WPRESTAPI.JSONParameters.objects[i];
            lHeader := lHeader + getDelimiter(',', i) + getJSONKey(lParam, 0) + '=' + getJSONValue(lParam, 0);
          end;

          with URI(URL, 'GET', @Resp, @lHeader) do
            if Lo = HTTP_SUCCESS then
            begin // GET with SQL sent
              if high(Tables) = 0 then
                Result := TSQLTableJSON.CreateFromTables([Tables[0]], SQL, Resp)
              else
                Result := TSQLTableJSON.CreateFromTables(Tables, SQL, Resp);
              JsonStr := urldecode(Resp);
              Result.InternalState := Hi;
            end
            else // get data
              Result := nil;
        finally
          JSONStr:=Resp;
        end;

      end;
    end;

  end;

{$ENDREGION}
{$REGION 'TSQLWooClient'}
  function TSQLWooClient.EngineAdd(TableModelIndex: integer; const SentData: RawUTF8): TID;
  var P: PUTF8Char;
    URL, head, Resp, lAPIVersion, lSentdata: RawUTF8;
    lData: IJSONObject;
    lRoute: string;

  begin
    Result := -1;
    lData := JSON(UTF8ToString(SentData));
    lAPIVersion := '';
    if WooRESTAPI.RESTAPIVersion <> '' then
      lAPIVersion := WooRESTAPI.RESTAPIVersion + '/';

    if TWOOCOMMERCE(WooRESTAPI).fillRequestURLParameters(WooRESTAPI.getBaseURL(False), lAPIVersion + route ,
      WooRESTAPI.getRestAPIParameters.AsJSON, 'POST', 'API') then
    begin
      try
        URL := WooRESTAPI.RestAPI + '/' + lAPIVersion + route  + UrlEncode(WooRESTAPI.parameters) ;
        lData := JSON;
        lRoute := UTF8ToString(route);
        if EndsText('s', lRoute) then
          lRoute := copy(lRoute, 1, length(lRoute) - 1);
        lData[lRoute] := JSON(UTF8ToString(SentData));
        lSentdata := StringToUTF8(lData.AsJSON);

        result := 0;
  //      url := Model.URI[Model.Tables[TableModelIndex]];
        if URI(url,'POST', @Resp,@Head,@lSentData).Lo<>HTTP_CREATED then
          exit; // response must be '201 Created'
      finally
        JSONStr := Resp;
      end;
      lData := JSON(JSONStr);
      if lData.has[lRoute] then
        if lData.objects[lRoute].has['ID'] then
           result := lData.objects[lRoute].integers['ID'];
    end;
  end;

  function TSQLWooClient.EngineUpdate(TableModelIndex: integer; ID: TID; const SentData: RawUTF8): boolean;
  var
    URL, header, Resp, lAPIVersion, lSentdata: RawUTF8;
    lData: IJSONObject;
    lRoute: string;
  begin
    Result := False;
    lData := JSON(UTF8ToString(SentData));
    lAPIVersion := '';
    if WooRESTAPI.RESTAPIVersion <> '' then
      lAPIVersion := WooRESTAPI.RESTAPIVersion + '/';

    if TWOOCOMMERCE(WooRESTAPI).fillRequestURLParameters(WooRESTAPI.getBaseURL(False), lAPIVersion + route + '/' + Int64ToUtf8(ID),
      WooRESTAPI.getRestAPIParameters.AsJSON, 'POST', 'API') then
    begin
      try
        URL := WooRESTAPI.RestAPI + '/' + lAPIVersion + route + '/' + Int64ToUtf8(ID) + UrlEncode(WooRESTAPI.parameters); // +  '&XDEBUG_SESSION_START=WPtest';
        lData := JSON;
        lRoute := UTF8ToString(route);
        if EndsText('s', lRoute) then
          lRoute := copy(lRoute, 1, length(lRoute) - 1);
        lData[lRoute] := JSON(UTF8ToString(SentData));
        lSentdata := StringToUTF8(lData.AsJSON);
        Result := URI(URL, 'POST', @Resp, @header, @lSentdata).Lo = HTTP_SUCCESS;
      finally
        JSONStr := Resp;
      end;
    end;
  end;

  function TSQLWooClient.ExecuteList(const Tables: array of TSQLRecordClass; const SQL: RawUTF8): TSQLTableJSON;
  var
    Resp: RawUTF8;
    URL, header, lAPIVersion: RawUTF8;
    lParameters, lFilters: IJSONObject;

  begin
    Result := nil;
    if not(self = nil) then
    begin
      lAPIVersion := '';
      if WooRESTAPI.RESTAPIVersion <> '' then
        lAPIVersion := WooRESTAPI.RESTAPIVersion + '/';

      lParameters := WooRESTAPI.AddFiltersToParameters(WooRESTAPI.getRestAPIParameters, Filters);

      if TWOOCOMMERCE(WooRESTAPI).fillRequestURLParameters(WooRESTAPI.getBaseURL(False), lAPIVersion + route, lParameters.AsJSON, 'GET', 'API') then
      begin
        try
          URL := WooRESTAPI.RestAPI + '/' + lAPIVersion + route + UrlEncode(WooRESTAPI.parameters);

          lFilters := JSON(Filters);
          if lFilters.count > 0 then
            URL := URL + '&' + TWOOCOMMERCE(WooRESTAPI).getQueryString(lFilters, True, True);

          with URI(URL, 'GET', @Resp, @header) do
            if Lo = HTTP_SUCCESS then
            begin // GET with SQL sent
              if high(Tables) = 0 then
                Result := TSQLTableJSON.CreateFromTables([Tables[0]], SQL, Resp)
              else
                Result := TSQLTableJSON.CreateFromTables(Tables, SQL, Resp);
              Result.InternalState := Hi;
            end
            else // get data
              Result := nil;
        finally
          JSONStr := Resp;
        end;
      end;
    end;

  end;

{$ENDREGION}

end.
